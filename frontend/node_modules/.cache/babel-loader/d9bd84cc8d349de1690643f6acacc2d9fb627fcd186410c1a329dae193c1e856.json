{"ast":null,"code":"var _jsxFileName = \"Z:\\\\RH\\\\frontend\\\\src\\\\RepositoryCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RepositoryCard({\n  repo,\n  user\n}) {\n  _s();\n  const [bookmarked, setBookmarked] = useState(false);\n  const [bookmarkId, setBookmarkId] = useState(null);\n  useEffect(() => {\n    if (!user) return;\n    fetch(`http://localhost:5000/api/bookmarks/user/${user.id}/type/repository`).then(res => res.json()).then(data => {\n      const found = data.find(b => b.item === repo._id);\n      if (found) {\n        setBookmarked(true);\n        setBookmarkId(found._id);\n      } else {\n        setBookmarked(false);\n        setBookmarkId(null);\n      }\n    });\n  }, [user, repo._id]);\n  const handleBookmark = async () => {\n    if (!user) return;\n    if (bookmarked && bookmarkId) {\n      await fetch(`http://localhost:5000/api/bookmarks/${bookmarkId}`, {\n        method: 'DELETE'\n      });\n      setBookmarked(false);\n      setBookmarkId(null);\n    } else {\n      const res = await fetch('http://localhost:5000/api/bookmarks/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: user.id,\n          type: 'repository',\n          item: repo._id\n        })\n      });\n      const data = await res.json();\n      setBookmarked(true);\n      setBookmarkId(data._id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: bookmarked ? 'contained' : 'outlined',\n    color: \"warning\",\n    onClick: handleBookmark,\n    children: bookmarked ? 'Bookmarked' : 'Bookmark'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(RepositoryCard, \"4awbMazhj8tKjHOhoD/z37NHjfE=\");\n_c = RepositoryCard;\nexport default RepositoryCard;\nvar _c;\n$RefreshReg$(_c, \"RepositoryCard\");","map":{"version":3,"names":["React","useEffect","useState","Button","jsxDEV","_jsxDEV","RepositoryCard","repo","user","_s","bookmarked","setBookmarked","bookmarkId","setBookmarkId","fetch","id","then","res","json","data","found","find","b","item","_id","handleBookmark","method","headers","body","JSON","stringify","type","variant","color","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["Z:/RH/frontend/src/RepositoryCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button } from '@mui/material';\r\n\r\nfunction RepositoryCard({ repo, user }) {\r\n  const [bookmarked, setBookmarked] = useState(false);\r\n  const [bookmarkId, setBookmarkId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    fetch(`http://localhost:5000/api/bookmarks/user/${user.id}/type/repository`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const found = data.find(b => b.item === repo._id);\r\n        if (found) {\r\n          setBookmarked(true);\r\n          setBookmarkId(found._id);\r\n        } else {\r\n          setBookmarked(false);\r\n          setBookmarkId(null);\r\n        }\r\n      });\r\n  }, [user, repo._id]);\r\n\r\n  const handleBookmark = async () => {\r\n    if (!user) return;\r\n    if (bookmarked && bookmarkId) {\r\n      await fetch(`http://localhost:5000/api/bookmarks/${bookmarkId}`, { method: 'DELETE' });\r\n      setBookmarked(false);\r\n      setBookmarkId(null);\r\n    } else {\r\n      const res = await fetch('http://localhost:5000/api/bookmarks/', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ user: user.id, type: 'repository', item: repo._id })\r\n      });\r\n      const data = await res.json();\r\n      setBookmarked(true);\r\n      setBookmarkId(data._id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      variant={bookmarked ? 'contained' : 'outlined'}\r\n      color=\"warning\"\r\n      onClick={handleBookmark}\r\n    >\r\n      {bookmarked ? 'Bookmarked' : 'Bookmark'}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default RepositoryCard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,cAAcA,CAAC;EAAEC,IAAI;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,IAAI,EAAE;IACXM,KAAK,CAAC,4CAA4CN,IAAI,CAACO,EAAE,kBAAkB,CAAC,CACzEC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACZ,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKhB,IAAI,CAACiB,GAAG,CAAC;MACjD,IAAIJ,KAAK,EAAE;QACTT,aAAa,CAAC,IAAI,CAAC;QACnBE,aAAa,CAACO,KAAK,CAACI,GAAG,CAAC;MAC1B,CAAC,MAAM;QACLb,aAAa,CAAC,KAAK,CAAC;QACpBE,aAAa,CAAC,IAAI,CAAC;MACrB;IACF,CAAC,CAAC;EACN,CAAC,EAAE,CAACL,IAAI,EAAED,IAAI,CAACiB,GAAG,CAAC,CAAC;EAEpB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACjB,IAAI,EAAE;IACX,IAAIE,UAAU,IAAIE,UAAU,EAAE;MAC5B,MAAME,KAAK,CAAC,uCAAuCF,UAAU,EAAE,EAAE;QAAEc,MAAM,EAAE;MAAS,CAAC,CAAC;MACtFf,aAAa,CAAC,KAAK,CAAC;MACpBE,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL,MAAMI,GAAG,GAAG,MAAMH,KAAK,CAAC,sCAAsC,EAAE;QAC9DY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEtB,IAAI,EAAEA,IAAI,CAACO,EAAE;UAAEgB,IAAI,EAAE,YAAY;UAAER,IAAI,EAAEhB,IAAI,CAACiB;QAAI,CAAC;MAC5E,CAAC,CAAC;MACF,MAAML,IAAI,GAAG,MAAMF,GAAG,CAACC,IAAI,CAAC,CAAC;MAC7BP,aAAa,CAAC,IAAI,CAAC;MACnBE,aAAa,CAACM,IAAI,CAACK,GAAG,CAAC;IACzB;EACF,CAAC;EAED,oBACEnB,OAAA,CAACF,MAAM;IACL6B,OAAO,EAAEtB,UAAU,GAAG,WAAW,GAAG,UAAW;IAC/CuB,KAAK,EAAC,SAAS;IACfC,OAAO,EAAET,cAAe;IAAAU,QAAA,EAEvBzB,UAAU,GAAG,YAAY,GAAG;EAAU;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEb;AAAC9B,EAAA,CA/CQH,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAiDvB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}