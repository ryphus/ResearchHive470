{"ast":null,"code":"var _jsxFileName = \"Z:\\\\RH\\\\frontend\\\\src\\\\Connections.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Box, TextField, Button, Typography, Paper, List, ListItem, ListItemText } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Connections() {\n  _s();\n  const [search, setSearch] = useState('');\n  const [results, setResults] = useState([]);\n  const [connections, setConnections] = useState([]); // Should be loaded from backend for logged-in user\n  const [message, setMessage] = useState('');\n\n  // Search users by username\n  const handleSearch = async () => {\n    setMessage('');\n    const res = await fetch(`http://localhost:5000/api/user/search?username=${search}`);\n    const data = await res.json();\n    setResults(data);\n  };\n\n  // Add connection\n  const handleAdd = async username => {\n    const res = await fetch('http://localhost:5000/api/connections/add', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    if (res.ok) {\n      setConnections([...connections, username]);\n      setMessage(`Connected with ${username}`);\n    }\n  };\n\n  // Remove connection\n  const handleRemove = async username => {\n    const res = await fetch('http://localhost:5000/api/connections/remove', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    if (res.ok) {\n      setConnections(connections.filter(u => u !== username));\n      setMessage(`Removed connection with ${username}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      mt: 6,\n      mb: 6,\n      component: Paper,\n      elevation: 3,\n      p: 4,\n      borderRadius: 3,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Search researchers by username...\",\n        value: search,\n        onChange: e => setSearch(e.target.value),\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        fullWidth: true,\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        mt: 4,\n        children: \"Search Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [results.length === 0 && /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"text.secondary\",\n          children: \"No researchers found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 36\n        }, this), results.map(user => /*#__PURE__*/_jsxDEV(ListItem, {\n          secondaryAction: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"primary\",\n            onClick: () => handleAdd(user.username),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, user.username, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        mt: 4,\n        children: \"Your Connections\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: connections.map(username => /*#__PURE__*/_jsxDEV(ListItem, {\n          secondaryAction: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"error\",\n            onClick: () => handleRemove(username),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, username, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"success.main\",\n        mt: 2,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Connections, \"192gDyq3xl7uPI5U7ZYH4y1L4TU=\");\n_c = Connections;\nexport default Connections;\nvar _c;\n$RefreshReg$(_c, \"Connections\");","map":{"version":3,"names":["React","useState","Container","Box","TextField","Button","Typography","Paper","List","ListItem","ListItemText","jsxDEV","_jsxDEV","Connections","_s","search","setSearch","results","setResults","connections","setConnections","message","setMessage","handleSearch","res","fetch","data","json","handleAdd","username","method","headers","body","JSON","stringify","ok","handleRemove","filter","u","maxWidth","children","mt","mb","component","elevation","p","borderRadius","fullWidth","label","value","onChange","e","target","sx","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","onClick","length","map","user","secondaryAction","primary","_c","$RefreshReg$"],"sources":["Z:/RH/frontend/src/Connections.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Box, TextField, Button, Typography, Paper, List, ListItem, ListItemText } from '@mui/material';\r\n\r\nfunction Connections() {\r\n  const [search, setSearch] = useState('');\r\n  const [results, setResults] = useState([]);\r\n  const [connections, setConnections] = useState([]); // Should be loaded from backend for logged-in user\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Search users by username\r\n  const handleSearch = async () => {\r\n    setMessage('');\r\n    const res = await fetch(`http://localhost:5000/api/user/search?username=${search}`);\r\n    const data = await res.json();\r\n    setResults(data);\r\n  };\r\n\r\n  // Add connection\r\n  const handleAdd = async (username) => {\r\n    const res = await fetch('http://localhost:5000/api/connections/add', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username })\r\n    });\r\n    if (res.ok) {\r\n      setConnections([...connections, username]);\r\n      setMessage(`Connected with ${username}`);\r\n    }\r\n  };\r\n\r\n  // Remove connection\r\n  const handleRemove = async (username) => {\r\n    const res = await fetch('http://localhost:5000/api/connections/remove', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username })\r\n    });\r\n    if (res.ok) {\r\n      setConnections(connections.filter(u => u !== username));\r\n      setMessage(`Removed connection with ${username}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Box mt={6} mb={6} component={Paper} elevation={3} p={4} borderRadius={3}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Search researchers by username...\"\r\n          value={search}\r\n          onChange={e => setSearch(e.target.value)}\r\n          sx={{ mb: 2 }}\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleSearch}>\r\n          Search\r\n        </Button>\r\n        <Typography variant=\"h6\" mt={4}>Search Results</Typography>\r\n        <List>\r\n          {results.length === 0 && <Typography color=\"text.secondary\">No researchers found.</Typography>}\r\n          {results.map(user => (\r\n            <ListItem key={user.username} secondaryAction={\r\n              <Button variant=\"outlined\" color=\"primary\" onClick={() => handleAdd(user.username)}>\r\n                Add\r\n              </Button>\r\n            }>\r\n              <ListItemText primary={user.username} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Typography variant=\"h6\" mt={4}>Your Connections</Typography>\r\n        <List>\r\n          {connections.map(username => (\r\n            <ListItem key={username} secondaryAction={\r\n              <Button variant=\"outlined\" color=\"error\" onClick={() => handleRemove(username)}>\r\n                Remove\r\n              </Button>\r\n            }>\r\n              <ListItemText primary={username} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        {message && <Typography color=\"success.main\" mt={2}>{message}</Typography>}\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Connections;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}