MONGO_URI=mongodb+srv://csmobik:3oqe5tNIvWFAUB1A@clustersiam.pjjv1kv.mongodb.net/researchhive?retryWrites=true&w=majority&appName=ClusterSiam
//ekhane ami shob ajaira jinish rakhsi


bla bla

import React, { useState } from 'react';
import { Container, Box, Typography, TextField, Button, Alert, Paper } from '@mui/material';

function App() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleRegister = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');

    const response = await fetch('http://localhost:5000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, email, password }),
    });

    const data = await response.json();
    if (response.ok) {
      setMessage('Registration successful!');
      setName('');
      setEmail('');
      setPassword('');
    } else {
      setError(data.message || 'Registration failed');
    }
  };

  return (
    <Container maxWidth="sm">
      <Box mt={8} component={Paper} elevation={3} p={4}>
        <Typography variant="h4" align="center" gutterBottom>
          ResearchHive Registration
        </Typography>
        <form onSubmit={handleRegister}>
          <TextField
            label="Name"
            variant="outlined"
            fullWidth
            margin="normal"
            value={name}
            onChange={e => setName(e.target.value)}
            required
          />
          <TextField
            label="Email"
            type="email"
            variant="outlined"
            fullWidth
            margin="normal"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
          <TextField
            label="Password"
            type="password"
            variant="outlined"
            fullWidth
            margin="normal"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
          <Button
            type="submit"
            variant="contained"
            color="primary"
            fullWidth
            sx={{ mt: 2 }}
          >
            Register
          </Button>
        </form>
        {message && <Alert severity="success" sx={{ mt: 2 }}>{message}</Alert>}
        {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
      </Box>
    </Container>
  );
}

export default App;



Registration

import React, { useState } from 'react';
import { Container, Box, Typography, TextField, Button, Alert, Paper } from '@mui/material';

function App() {
  const [username, setUsername] = useState(''); // 1. username state
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleRegister = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');

    // user name done
    const response = await fetch('http://localhost:5000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, name, email, password }),
    });

    const data = await response.json();
    if (response.ok) {
      setMessage('Registration successful!');
      setUsername('');
      setName('');
      setEmail('');
      setPassword('');
    } else {
      setError(data.message || 'Registration failed');
    }
  };

  return (
    <Container maxWidth="sm">
      <Box mt={8} component={Paper} elevation={3} p={4}>
        <Typography variant="h4" align="center" gutterBottom>
          ResearchHive Registration
        </Typography>
        <form onSubmit={handleRegister}>
          {/* 2. Add username field */}
          <TextField
            label="Username"
            variant="outlined"
            fullWidth
            margin="normal"
            value={username}
            onChange={e => setUsername(e.target.value)}
            required
          />
          <TextField
            label="Name"
            variant="outlined"
            fullWidth
            margin="normal"
            value={name}
            onChange={e => setName(e.target.value)}
            required
          />
          <TextField
            label="Email"
            type="email"
            variant="outlined"
            fullWidth
            margin="normal"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
          />
          <TextField
            label="Password"
            type="password"
            variant="outlined"
            fullWidth
            margin="normal"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
          />
          <Button
            type="submit"
            variant="contained"
            color="primary"
            fullWidth
            sx={{ mt: 2 }}
          >
            Register
          </Button>
        </form>
        {message && <Alert severity="success" sx={{ mt: 2 }}>{message}</Alert>}
        {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
      </Box>
    </Container>
  );
}

export default App;


done

import React, { useState } from 'react';
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Alert,
  Paper,
  Grid,
  Checkbox,
  FormControlLabel,
  Link,
} from '@mui/material';
import regPic from './regpic.png';

function App() {
  const [username, setUsername] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [agree, setAgree] = useState(false);

  const handleRegister = async (e) => {
    e.preventDefault();
    setMessage('');
    setError('');

    if (!agree) {
      setError('You must agree to the Terms of service');
      return;
    }

    const response = await fetch('http://localhost:5000/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, name, email, password }),
    });

    const data = await response.json();
    if (response.ok) {
      setMessage('Registration successful!');
      setUsername('');
      setName('');
      setEmail('');
      setPassword('');
      setAgree(false);
    } else {
      setError(data.message || 'Registration failed');
    }
  };

  return (
    <Container maxWidth="md">
      <Box
        mt={6}
        component={Paper}
        elevation={6}
        p={0}
        borderRadius={4}
        sx={{
          background: '#fff',
        }}
      >
        <Grid container>
          {/* Left side: Registration form */}
          <Grid
            item
            xs={12}
            md={6}
            sx={{
              px: 6,
              py: 8,
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              minHeight: 500,
            }}
          >
            <Typography variant="h4" fontWeight={700} gutterBottom>
              ResearchHive Registration
            </Typography>
            <form onSubmit={handleRegister}>
              <TextField
                label="Username"
                variant="outlined"
                fullWidth
                margin="normal"
                value={username}
                onChange={e => setUsername(e.target.value)}
                required
                autoFocus
              />
              <TextField
                label="Your Name"
                variant="outlined"
                fullWidth
                margin="normal"
                value={name}
                onChange={e => setName(e.target.value)}
                required
              />
              <TextField
                label="Your Email"
                type="email"
                variant="outlined"
                fullWidth
                margin="normal"
                value={email}
                onChange={e => setEmail(e.target.value)}
                required
              />
              <TextField
                label="Password"
                type="password"
                variant="outlined"
                fullWidth
                margin="normal"
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
              <FormControlLabel
                control={
                  <Checkbox
                    checked={agree}
                    onChange={e => setAgree(e.target.checked)}
                    required
                  />
                }
                label={
                  <span>
                    I agree all statements in{' '}
                    <Link href="#" underline="hover">
                      Terms of service
                    </Link>
                  </span>
                }
                sx={{ mt: 1 }}
              />
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                size="large"
                sx={{ mt: 2, mb: 1, py: 1.5, fontWeight: 600, fontSize: '1rem' }}
              >
                Register
              </Button>
              <Box textAlign="center" mt={2}>
                <Link href="#" underline="hover">
                  I am already member
                </Link>
              </Box>
              {message && <Alert severity="success" sx={{ mt: 2 }}>{message}</Alert>}
              {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}
            </form>
          </Grid>
          {/* Right side: Picture */}
          <Grid
            item
            xs={12}
            md={6}
            sx={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              minHeight: 500,
              background: '#f7f9fc',
              borderTopRightRadius: 16,
              borderBottomRightRadius: 16,
            }}
          >
            <img
              src={regPic}
              alt="Registration"
              style={{
                maxWidth: '80%',
                height: 'auto',
                borderRadius: 16,
                boxShadow: '0 4px 24px rgba(0,0,0,0.08)',
              }}
            />
          </Grid>
        </Grid>
      </Box>
    </Container>
  );
}

export default App;


chobi shoho picture// //basic index js create kore felsi 

const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const repositoryRoutes = require('./routes/Repository');
const path = require('path');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use('/api/auth', authRoutes);
app.use('/api/repository', repositoryRoutes);
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => app.listen(process.env.PORT || 5000, () => console.log('Server started')))
  .catch(err => console.log(err));

// Test route
app.get('/', (req, res) => {
  res.send('Welcome to ResearchHive API!');
});

// Connect to MongoDB (dorkar onujayi url update kore nite hobe)
mongoose.connect('mongodb://localhost:27017/researchhive', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch((err) => console.error('MongoDB connection error:', err));

// Import and use auth routes
const authRoutes = require('./routes/auth');
app.use('/api/auth', authRoutes);

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});


// mongoose.connect(process.env.MONGO_URI, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true
// })
// .then(() => console.log("✅ MongoDB Connected"))
// .catch(err => console.error("❌ Connection error:", err));

// app.get("/", (req, res) => {
//     res.send("Backend is running!");
// });

// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//     console.log(`🚀 Server is running on port ${PORT}`);
// });
